import streamlit as st
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
import io

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Tasa Recompra TLL",
    page_icon="üìä",
    layout="wide"
)

# ============================================
# CONFIGURACI√ìN: ID del archivo de Google Drive
# ============================================
GOOGLE_DRIVE_FILE_ID = "1CCKbRsijh7qls7-tUWgVoeHhlGHTrflY"
# ============================================

# Funci√≥n para cargar datos desde Google Drive
@st.cache_data(ttl=3600)  # Cache por 1 hora
def cargar_datos_desde_drive(file_id):
    """Carga el CSV desde Google Drive"""
    url = f'https://drive.google.com/uc?id={file_id}'
    try:
        df = pd.read_csv(url)
        return df, None
    except Exception as e:
        return None, str(e)

def temporalidad(df):
    """
    Identifica el a√±o actual (√∫ltimo a√±o con datos) y los 3 a√±os anteriores.

    Args:
        df: DataFrame con los datos de ventas

    Returns:
        dict: Diccionario con a√±o_actual y lista de a√±os_anteriores
    """
    columna_fecha = df.columns[2]  # Columna C [2]

    # Convertir fechas y obtener a√±os
    df_temp = df.copy()
    df_temp[columna_fecha] = pd.to_datetime(df_temp[columna_fecha], errors='coerce')
    df_temp['A√±o'] = df_temp[columna_fecha].dt.year

    # Obtener el √∫ltimo a√±o con datos
    a√±o_actual = int(df_temp['A√±o'].max())

    # Calcular los 3 a√±os anteriores
    a√±os_anteriores = [a√±o_actual - 1, a√±o_actual - 2, a√±o_actual - 3]

    return {
        'a√±o_actual': a√±o_actual,
        'a√±os_anteriores': a√±os_anteriores,
        'todos_a√±os': [a√±o_actual] + a√±os_anteriores
    }

def analisis_recompra(df):
    """
    Funci√≥n principal que realiza el an√°lisis de recompra de los 3 a√±os anteriores.
    Incluye filtros, procesamiento y visualizaci√≥n de datos.
    """
    # Obtener temporalidad
    temp = temporalidad(df)
    a√±os_anteriores = temp['a√±os_anteriores']  # Los 3 a√±os anteriores al actual
    a√±o_1, a√±o_2, a√±o_3 = a√±os_anteriores[0], a√±os_anteriores[1], a√±os_anteriores[2]

    # SECCI√ìN DE FILTROS
    st.header("üîç Filtros de An√°lisis")
    st.info(f"üìÖ Analizando los a√±os: **{a√±o_3}, {a√±o_2}, {a√±o_1}** (3 a√±os anteriores)")

    col1, col2, col3, col4 = st.columns(4)

    # Obtener nombres de columnas
    columna_tipo_asesor = df.columns[11]  # Columna L
    columna_departamento = df.columns[13]  # Columna N
    columna_familia = df.columns[18]  # Columna S
    columna_area = df.columns[22]  # Columna W

    with col1:
        st.subheader("üë§ Asesor")
        valores_asesor = ['Todos'] + sorted(df[columna_tipo_asesor].dropna().unique().tolist())
        filtro_asesor = st.multiselect(
            "Selecciona tipo(s) de asesor:",
            valores_asesor,
            default=['Todos'],
            key='asesor'
        )

    with col2:
        st.subheader("üè¢ CDS")
        valores_depto = ['Todos'] + sorted(df[columna_departamento].dropna().unique().tolist())
        filtro_depto = st.multiselect(
            "Selecciona departamento(s):",
            valores_depto,
            default=['Todos'],
            key='depto'
        )

    with col3:
        st.subheader("üõû Producto")
        valores_familia = ['Todos'] + sorted(df[columna_familia].dropna().unique().tolist())
        filtro_familia = st.multiselect(
            "Selecciona familia(s):",
            valores_familia,
            default=['Todos'],
            key='familia'
        )

    with col4:
        st.subheader("üìç √Årea")
        valores_area = ['Todos'] + sorted(df[columna_area].dropna().unique().tolist())
        filtro_area = st.multiselect(
            "Selecciona √°rea(s):",
            valores_area,
            default=['Todos'],
            key='area'
        )

    st.markdown("---")

    # Bot√≥n de an√°lisis
    if st.button("üöÄ ANALIZAR DATOS", type="primary", use_container_width=True, key='btn_analizar_recompra'):

        with st.spinner('Procesando datos...'):

            # Aplicar filtros
            df_filtrado = df.copy()

            if 'Todos' not in filtro_asesor:
                df_filtrado = df_filtrado[df_filtrado[columna_tipo_asesor].isin(filtro_asesor)]

            if 'Todos' not in filtro_depto:
                df_filtrado = df_filtrado[df_filtrado[columna_departamento].isin(filtro_depto)]

            if 'Todos' not in filtro_familia:
                df_filtrado = df_filtrado[df_filtrado[columna_familia].isin(filtro_familia)]

            if 'Todos' not in filtro_area:
                df_filtrado = df_filtrado[df_filtrado[columna_area].isin(filtro_area)]

            # Filtrar solo los 3 a√±os anteriores
            columna_fecha = df_filtrado.columns[2]
            df_filtrado[columna_fecha] = pd.to_datetime(df_filtrado[columna_fecha], errors='coerce')
            df_filtrado['A√±o'] = df_filtrado[columna_fecha].dt.year
            df_filtrado = df_filtrado[df_filtrado['A√±o'].isin(a√±os_anteriores)]

            # Verificar si hay datos despu√©s del filtro
            if len(df_filtrado) == 0:
                st.error("‚ùå No hay datos que coincidan con los filtros seleccionados. Por favor, ajusta tus criterios.")
            else:
                st.success(f"‚úÖ Se encontraron {len(df_filtrado)} registros con los filtros aplicados")

                # Procesar datos
                columna_id = df_filtrado.columns[3]
                columna_nombre = df_filtrado.columns[4]

                df_limpio = df_filtrado.dropna(subset=[columna_id, columna_nombre])

                visitas_por_a√±o = df_limpio.groupby([columna_id, columna_nombre, 'A√±o']).size().reset_index(name='Visitas')

                tabla_final = visitas_por_a√±o.pivot_table(
                    index=[columna_id, columna_nombre],
                    columns='A√±o',
                    values='Visitas',
                    fill_value=0
                ).reset_index()

                tabla_final.columns.name = None
                a√±o_cols = [col for col in tabla_final.columns if isinstance(col, (int, float))]
                for a√±o in a√±o_cols:
                    tabla_final.rename(columns={a√±o: f'Visitas_{int(a√±o)}'}, inplace=True)

                columnas_visitas = [col for col in tabla_final.columns if col.startswith('Visitas_')]
                tabla_final['Total_Visitas'] = tabla_final[columnas_visitas].sum(axis=1)
                tabla_final = tabla_final.sort_values('Total_Visitas', ascending=False)

                # Calcular m√©tricas
                clientes_por_a√±o = {}

                for a√±o in a√±os_anteriores:
                    col_a√±o = f'Visitas_{a√±o}'
                    if col_a√±o in tabla_final.columns:
                        clientes_por_a√±o[str(a√±o)] = len(tabla_final[tabla_final[col_a√±o] > 0])

                # Calcular recompras entre a√±os
                clientes_a√±o1_a√±o2 = 0
                clientes_a√±o2_a√±o3 = 0
                clientes_a√±o1_a√±o3 = 0
                clientes_tres_a√±os = 0

                col_a√±o1 = f'Visitas_{a√±o_1}'
                col_a√±o2 = f'Visitas_{a√±o_2}'
                col_a√±o3 = f'Visitas_{a√±o_3}'

                if col_a√±o1 in tabla_final.columns and col_a√±o2 in tabla_final.columns:
                    clientes_a√±o1_a√±o2 = len(tabla_final[(tabla_final[col_a√±o1] > 0) & (tabla_final[col_a√±o2] > 0)])

                if col_a√±o2 in tabla_final.columns and col_a√±o3 in tabla_final.columns:
                    clientes_a√±o2_a√±o3 = len(tabla_final[(tabla_final[col_a√±o2] > 0) & (tabla_final[col_a√±o3] > 0)])

                if col_a√±o1 in tabla_final.columns and col_a√±o3 in tabla_final.columns:
                    clientes_a√±o1_a√±o3 = len(tabla_final[(tabla_final[col_a√±o1] > 0) & (tabla_final[col_a√±o3] > 0)])

                if all(col in tabla_final.columns for col in [col_a√±o1, col_a√±o2, col_a√±o3]):
                    clientes_tres_a√±os = len(tabla_final[(tabla_final[col_a√±o1] > 0) &
                                                          (tabla_final[col_a√±o2] > 0) &
                                                          (tabla_final[col_a√±o3] > 0)])

                total_clientes_a√±o1 = clientes_por_a√±o.get(str(a√±o_1), 0)

                categorias = [f'{a√±o_2} a {a√±o_1}', f'{a√±o_3} a {a√±o_2}', f'{a√±o_3} a {a√±o_1}', 'Los 3 a√±os']
                valores = [clientes_a√±o1_a√±o2, clientes_a√±o2_a√±o3, clientes_a√±o1_a√±o3, clientes_tres_a√±os]

                if total_clientes_a√±o1 > 0:
                    porcentajes = [(v / total_clientes_a√±o1) * 100 for v in valores]
                else:
                    porcentajes = [0, 0, 0, 0]

                # Mostrar m√©tricas principales
                st.markdown("---")
                st.header("üìà M√©tricas Principales")

                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Total Clientes √önicos", len(tabla_final))
                with col2:
                    st.metric(f"Clientes {a√±o_3}", clientes_por_a√±o.get(str(a√±o_3), 0))
                with col3:
                    st.metric(f"Clientes {a√±o_2}", clientes_por_a√±o.get(str(a√±o_2), 0))
                with col4:
                    st.metric(f"Clientes {a√±o_1}", clientes_por_a√±o.get(str(a√±o_1), 0))

                # GR√ÅFICAS
                st.markdown("---")
                st.header("üìä Gr√°ficas de An√°lisis")

                # Gr√°fica 1
                st.subheader("Gr√°fica 1: Total de clientes por a√±o")
                fig1, ax1 = plt.subplots(figsize=(10, 6))
                a√±os_labels = list(clientes_por_a√±o.keys())
                valores_a√±os = list(clientes_por_a√±o.values())
                colores_a√±os = ['#f39c12', '#16a085', '#8e44ad']

                barras = ax1.bar(a√±os_labels, valores_a√±os, color=colores_a√±os[:len(a√±os_labels)],
                                 edgecolor='black', linewidth=1.5, width=0.6)

                for barra, valor in zip(barras, valores_a√±os):
                    altura = barra.get_height()
                    ax1.text(barra.get_x() + barra.get_width()/2., altura,
                            f'{int(valor)}', ha='center', va='bottom', fontsize=13, fontweight='bold')

                ax1.set_title('Gr√°fica 1: Total de clientes por a√±o', fontsize=15, fontweight='bold', pad=20)
                ax1.set_ylabel('N√∫mero de Clientes', fontsize=12)
                ax1.set_xlabel('A√±o', fontsize=12)
                ax1.grid(axis='y', alpha=0.3, linestyle='--')
                plt.tight_layout()
                st.pyplot(fig1)

                # Gr√°fica 2
                st.subheader("Gr√°fica 2: Cantidad de recompra en combinaciones por a√±os")
                fig2, ax2 = plt.subplots(figsize=(10, 6))
                colores = ['#3498db', '#2ecc71', '#e74c3c', '#9b59b6']

                barras = ax2.bar(categorias, valores, color=colores, edgecolor='black', linewidth=1.5)

                for barra, valor in zip(barras, valores):
                    altura = barra.get_height()
                    ax2.text(barra.get_x() + barra.get_width()/2., altura,
                            f'{int(valor)}', ha='center', va='bottom', fontsize=12, fontweight='bold')

                ax2.set_title('Gr√°fica 2: Cantidad de recompra en combinaciones por a√±os',
                             fontsize=15, fontweight='bold', pad=20)
                ax2.set_ylabel('N√∫mero de Clientes', fontsize=12)
                ax2.grid(axis='y', alpha=0.3, linestyle='--')
                plt.xticks(rotation=15, ha='right')
                plt.tight_layout()
                st.pyplot(fig2)

                # Gr√°fica 3
                st.subheader(f"Gr√°fica 3: Porcentaje de recompra en relaci√≥n a clientes {a√±o_1}")
                fig3, ax3 = plt.subplots(figsize=(10, 6))

                barras = ax3.bar(categorias, porcentajes, color=colores, edgecolor='black', linewidth=1.5)

                for barra, porcentaje in zip(barras, porcentajes):
                    altura = barra.get_height()
                    ax3.text(barra.get_x() + barra.get_width()/2., altura,
                            f'{porcentaje:.1f}%', ha='center', va='bottom', fontsize=12, fontweight='bold')

                ax3.set_title(f'Gr√°fica 3: Porcentaje de recompra en relaci√≥n a cantidad de clientes {a√±o_1}',
                             fontsize=15, fontweight='bold', pad=20)
                ax3.set_ylabel('Porcentaje (%)', fontsize=12)
                ax3.grid(axis='y', alpha=0.3, linestyle='--')
                plt.xticks(rotation=15, ha='right')
                ax3.set_ylim(0, max(porcentajes) * 1.15 if max(porcentajes) > 0 else 100)
                plt.tight_layout()
                st.pyplot(fig3)

                # DESCARGAS
                st.markdown("---")
                st.header("üíæ Descargar Resultados")

                col1, col2 = st.columns(2)

                with col1:
                    # Excel
                    output = io.BytesIO()
                    with pd.ExcelWriter(output, engine='openpyxl') as writer:
                        stats_generales = pd.DataFrame({
                            'M√©trica': ['Total de clientes √∫nicos', 'A√±os analizados'],
                            'Valor': [len(tabla_final), ', '.join([col.replace('Visitas_', '') for col in columnas_visitas])]
                        })
                        stats_generales.to_excel(writer, sheet_name='Estad√≠sticas Generales', index=False)

                        clientes_a√±o_df = pd.DataFrame({
                            'A√±o': list(clientes_por_a√±o.keys()),
                            'Total de Clientes': list(clientes_por_a√±o.values())
                        })
                        clientes_a√±o_df.to_excel(writer, sheet_name='Clientes por A√±o', index=False)

                        retencion_df = pd.DataFrame({
                            'Combinaci√≥n de A√±os': categorias,
                            'Cantidad de Clientes': valores
                        })
                        retencion_df.to_excel(writer, sheet_name='Retenci√≥n de Clientes', index=False)

                        porcentajes_df = pd.DataFrame({
                            'Combinaci√≥n de A√±os': categorias,
                            'Cantidad de Clientes': valores,
                            f'Porcentaje respecto a {a√±o_1}': [f"{p:.2f}%" for p in porcentajes]
                        })
                        porcentajes_df.to_excel(writer, sheet_name='Resumen de Porcentajes', index=False)

                        tabla_final.to_excel(writer, sheet_name='Datos Completos', index=False)

                    output.seek(0)
                    st.download_button(
                        label="üì• Descargar Excel Completo",
                        data=output,
                        file_name="analisis_completo_clientes.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

                with col2:
                    # CSV
                    csv = tabla_final.to_csv(index=False, encoding='utf-8-sig')
                    st.download_button(
                        label="üì• Descargar CSV de Datos",
                        data=csv,
                        file_name="frecuencia_clientes.csv",
                        mime="text/csv"
                    )

                st.success("‚úÖ An√°lisis completado exitosamente!")

def fidelizacion_clientes(df):
    """
    Funci√≥n que identifica clientes que NO han regresado en el a√±o actual
    pero que s√≠ compraron en a√±os anteriores.
    Muestra gr√°fico de clientes que han regresado y retorna lista de clientes perdidos.
    """
    # Obtener temporalidad
    temp = temporalidad(df)
    a√±o_actual = temp['a√±o_actual']
    a√±os_anteriores = temp['a√±os_anteriores']

    st.header("üîÑ Fidelizaci√≥n de Clientes")
    st.info(f"üìÖ A√±o actual: **{a√±o_actual}** | A√±os anteriores: **{a√±os_anteriores[0]}, {a√±os_anteriores[1]}, {a√±os_anteriores[2]}**")

    if st.button("üîç ANALIZAR FIDELIZACI√ìN", type="primary", use_container_width=True, key='btn_fidelizacion'):

        with st.spinner('Procesando datos...'):

            # Procesar datos
            columna_id = df.columns[3]  # C√≥digo de cliente
            columna_fecha = df.columns[2]  # Fecha
            columna_nombre = df.columns[4]  # Nombre
            columna_correo = df.columns[5]  # Correo
            columna_tel1 = df.columns[6]  # Tel√©fono 1
            columna_tel2 = df.columns[7]  # Tel√©fono 2
            columna_placa = df.columns[8]  # Placa

            df_temp = df.copy()
            df_temp[columna_fecha] = pd.to_datetime(df_temp[columna_fecha], errors='coerce')
            df_temp['A√±o'] = df_temp[columna_fecha].dt.year

            df_limpio = df_temp.dropna(subset=[columna_id])

            # Clientes del a√±o actual
            clientes_a√±o_actual = set(df_limpio[df_limpio['A√±o'] == a√±o_actual][columna_id].unique())

            # Clientes de a√±os anteriores
            clientes_a√±os_anteriores = set(df_limpio[df_limpio['A√±o'].isin(a√±os_anteriores)][columna_id].unique())

            # Clientes que NO han regresado en el a√±o actual
            clientes_no_regresaron = clientes_a√±os_anteriores - clientes_a√±o_actual

            # Clientes que S√ç regresaron
            clientes_regresaron = clientes_a√±os_anteriores & clientes_a√±o_actual

            # Mostrar m√©tricas
            st.markdown("---")
            st.header("üìä Resultados de Fidelizaci√≥n")

            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Clientes A√±os Anteriores", len(clientes_a√±os_anteriores))
            with col2:
                st.metric("‚úÖ Clientes que Regresaron", len(clientes_regresaron))
            with col3:
                st.metric("‚ùå Clientes que NO Regresaron", len(clientes_no_regresaron))

            # Gr√°fica de barras
            st.markdown("---")
            st.subheader("Gr√°fica: Comparaci√≥n de clientes")

            fig, ax = plt.subplots(figsize=(10, 6))
            categorias = ['Clientes que\nRegresaron', 'Clientes que\nNO Regresaron']
            valores = [len(clientes_regresaron), len(clientes_no_regresaron)]
            colores = ['#2ecc71', '#e74c3c']

            barras = ax.bar(categorias, valores, color=colores, edgecolor='black', linewidth=1.5)

            for barra, valor in zip(barras, valores):
                altura = barra.get_height()
                ax.text(barra.get_x() + barra.get_width()/2., altura,
                        f'{int(valor)}', ha='center', va='bottom', fontsize=13, fontweight='bold')

            ax.set_title(f'Comparaci√≥n de Fidelizaci√≥n de Clientes en {a√±o_actual}',
                         fontsize=15, fontweight='bold', pad=20)
            ax.set_ylabel('N√∫mero de Clientes', fontsize=12)
            ax.grid(axis='y', alpha=0.3, linestyle='--')
            plt.tight_layout()
            st.pyplot(fig)

            # Obtener datos de clientes que no regresaron
            if len(clientes_no_regresaron) > 0:
                st.markdown("---")
                st.header("üìã Listado de Clientes que NO Regresaron")

                # Crear DataFrame con informaci√≥n de clientes perdidos
                clientes_perdidos = []

                for cliente_id in clientes_no_regresaron:
                    # Obtener datos del cliente (tomar el primer registro)
                    datos_cliente = df_limpio[df_limpio[columna_id] == cliente_id].iloc[0]

                    # Determinar en qu√© a√±os compr√≥
                    a√±os_compra = df_limpio[df_limpio[columna_id] == cliente_id]['A√±o'].unique()
                    a√±os_compra_str = ', '.join([str(a√±o) for a√±o in sorted(a√±os_compra)])

                    clientes_perdidos.append({
                        'C√≥digo Cliente': cliente_id,
                        'Nombre': datos_cliente[columna_nombre],
                        'Correo': datos_cliente[columna_correo],
                        'Tel√©fono 1': datos_cliente[columna_tel1],
                        'Tel√©fono 2': datos_cliente[columna_tel2],
                        'Placa': datos_cliente[columna_placa],
                        'A√±os en que compr√≥': a√±os_compra_str
                    })

                df_perdidos = pd.DataFrame(clientes_perdidos)

                # Mostrar tabla
                st.dataframe(df_perdidos, use_container_width=True)

                # Bot√≥n de descarga
                st.markdown("---")
                st.subheader("üíæ Descargar Listado")

                col1, col2 = st.columns(2)

                with col1:
                    # Excel
                    output = io.BytesIO()
                    with pd.ExcelWriter(output, engine='openpyxl') as writer:
                        df_perdidos.to_excel(writer, sheet_name='Clientes No Regresaron', index=False)
                    output.seek(0)
                    st.download_button(
                        label="üì• Descargar Excel",
                        data=output,
                        file_name=f"clientes_no_regresaron_{a√±o_actual}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

                with col2:
                    # CSV
                    csv = df_perdidos.to_csv(index=False, encoding='utf-8-sig')
                    st.download_button(
                        label="üì• Descargar CSV",
                        data=csv,
                        file_name=f"clientes_no_regresaron_{a√±o_actual}.csv",
                        mime="text/csv"
                    )

                st.success(f"‚úÖ An√°lisis completado: {len(clientes_no_regresaron)} clientes no han regresado en {a√±o_actual}")
            else:
                st.success("üéâ Excelente! Todos los clientes anteriores han regresado en el a√±o actual.")


# ============================================
# INTERFAZ PRINCIPAL
# ============================================

# Contenedor con t√≠tulo y logo (responsive con CSS)
st.markdown("""
<style>
.header-box {
    background-color: #272F59;
    border-radius: 10px;
    padding: 15px;
    text-align: center;
}
.header-box h1 {
    color: white;
    margin: 0;
    font-size: 22px;
}
.header-box img {
    height: 50px; /* tama√±o en pantallas grandes */
    margin-top: 10px;
}

/* üì± Ajuste para m√≥viles */
@media (max-width: 600px) {
    .header-box img {
        height: auto;
        width: 70%; /* logo se ajusta al ancho de pantalla */
        max-width: 200px; /* l√≠mite para que no se agrande demasiado */
    }
}
</style>

<div class="header-box">
    <img src="https://www.tellantas.com/wp-content/uploads/2022/11/cropped-cropped-logo392negativo-png.avif" alt="Logo">
    <h1>üìä An√°lisis de Recompra de Clientes</h1>
</div>
""", unsafe_allow_html=True)

st.markdown("---")

# Sidebar con men√∫ y instrucciones
with st.sidebar:
    # Marca de registro del programa
    logo_url = "https://elchorro.com.co/wp-content/uploads/2025/04/ch-plano.png?w=106&h=106"
    col_logo, col_texto = st.columns([1, 3], vertical_alignment="center")
    with col_logo:
        st.image(logo_url, width=60)
    with col_texto:
        st.markdown("""
            <div style="font-size:10px; line-height:1.1;">
                <span style="font-style:italic;">Este programa fue desarrollado por:</span><br>
                <span style="font-weight:bold;">Daniel Cort√°zar Triana</span><br>
                <span style="font-weight:bold;">El Chorro Producciones SAS</span>
            </div>
        """, unsafe_allow_html=True)

    st.markdown("---")

    # MEN√ö DE SELECCI√ìN DE FUNCIONES
    st.header("üìã Men√∫ Principal")

    opcion = st.radio(
        "Selecciona una funci√≥n:",
        ["üìà An√°lisis de Recompra", "üîÑ Fidelizaci√≥n de Clientes"],
        key='menu_principal'
    )

    st.markdown("---")

    # INSTRUCCIONES SEG√öN LA OPCI√ìN
    st.header("‚ÑπÔ∏è Instrucciones")

    if opcion == "üìà An√°lisis de Recompra":
        st.markdown("""
        1. **Selecciona los filtros** que deseas aplicar.
        2. **Haz clic en Analizar.** El aplicativo te mostrar√° los estad√≠sticos de total de clientes y recompra de los **3 a√±os anteriores**.
        3. **Descarga** las gr√°ficas y el Excel con la informaci√≥n para armar otros informes.
        """)
    else:  # Fidelizaci√≥n de Clientes
        st.markdown("""
        1. **Haz clic en Analizar Fidelizaci√≥n** para identificar clientes que no han regresado en el a√±o actual.
        2. Ver√°s una **gr√°fica comparativa** de clientes que regresaron vs los que no.
        3. Podr√°s **descargar un listado completo** con datos de contacto de clientes que no han regresado.
        """)

    st.markdown("---")
    st.markdown("üí° **Tip:** Puedes cambiar de funci√≥n en cualquier momento usando el men√∫ superior")

    # Bot√≥n para recargar datos
    if st.button("üîÑ Actualizar Datos"):
        st.cache_data.clear()
        st.rerun()

# Cargar datos
with st.spinner('Cargando datos...'):
    df, error = cargar_datos_desde_drive(GOOGLE_DRIVE_FILE_ID)

if error:
    st.error(f"‚ùå Error al cargar los datos: {error}")
    st.info("""
    **Posibles soluciones:**
    1. Verifica que el archivo est√© compartido como "Cualquiera con el enlace puede ver"
    2. Verifica que sea un archivo CSV v√°lido
    3. Intenta recargar la p√°gina
    """)
    st.stop()

if df is None:
    st.error("‚ùå No se pudieron cargar los datos.")
    st.stop()

st.success(f"‚úÖ Datos cargados correctamente: {len(df)} registros")

# Mostrar informaci√≥n de temporalidad
temp = temporalidad(df)
st.info(f"üìÖ **Per√≠odo de datos:** A√±o actual: **{temp['a√±o_actual']}** | A√±os anteriores: **{temp['a√±os_anteriores'][0]}, {temp['a√±os_anteriores'][1]}, {temp['a√±os_anteriores'][2]}**")

st.markdown("---")

# EJECUTAR LA FUNCI√ìN SELECCIONADA
if opcion == "üìà An√°lisis de Recompra":
    analisis_recompra(df)
else:  # Fidelizaci√≥n de Clientes
    fidelizacion_clientes(df)
